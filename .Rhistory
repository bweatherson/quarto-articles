dnorm(
qnorm(b) -
2^0.5 * qnorm(a)
)
) +
(dnorm(
2^0.5 * qnorm(b)
) *
dnorm(
qnorm(a) -
2^0.5 * qnorm(b)
)
h
}
headsplot <- function(x){heads(0.75,x)}
# a <- 0.07
# b <- 0.75
#
# # Assume H
# xh <- 2^0.5 * qnorm(a)
# yh <- qnorm(b) - 2^0.5 * qnorm(a)
# hp <- dnorm(xh) * dnorm(yh)
#
# # Assume not H
# xnh <- 2^0.5 * qnorm(b)
# ynh <- qnorm(a) - 2^0.5 * qnorm(b)
# nhp <- dnorm(xnh) * dnorm(ynh)
#
# h <- hp / (hp + nhp)
# p <- (1-h)*a + h*b
ggplot() +
theme_minimal() +
xlim(0.001,0.999) +
geom_function(fun = headsplot) +
#  geom_function(fun = identity, color = "grey80") +
labs(
x = "B(*p*)",
y = "Posterior probability of Heads"
) +
theme(axis.title.y = ggtext::element_markdown(),
axis.title.x = ggtext::element_markdown())
heads(0.75, 0.5)
headsplot(0.5)
require(tidyverse)
heads <- function(a, b){
h = (dnorm(
2^0.5 * qnorm(a)
) *
dnorm(
qnorm(b) -
2^0.5 * qnorm(a)
)
) /
(
(dnorm(
2^0.5 * qnorm(a)
) *
dnorm(
qnorm(b) -
2^0.5 * qnorm(a)
)
) +
(dnorm(
2^0.5 * qnorm(b)
) *
dnorm(
qnorm(a) -
2^0.5 * qnorm(b)
)
h
}
headsplot <- function(x){heads(0.9,x)}
# a <- 0.07
# b <- 0.75
#
# # Assume H
# xh <- 2^0.5 * qnorm(a)
# yh <- qnorm(b) - 2^0.5 * qnorm(a)
# hp <- dnorm(xh) * dnorm(yh)
#
# # Assume not H
# xnh <- 2^0.5 * qnorm(b)
# ynh <- qnorm(a) - 2^0.5 * qnorm(b)
# nhp <- dnorm(xnh) * dnorm(ynh)
#
# h <- hp / (hp + nhp)
# p <- (1-h)*a + h*b
ggplot() +
theme_minimal() +
xlim(0.001,0.999) +
geom_function(fun = headsplot) +
#  geom_function(fun = identity, color = "grey80") +
labs(
x = "B(*p*)",
y = "Posterior probability of Heads"
) +
theme(axis.title.y = ggtext::element_markdown(),
axis.title.x = ggtext::element_markdown())
require(tidyverse)
heads <- function(a, b){
h = (dnorm(
2^0.5 * qnorm(a)
) *
dnorm(
qnorm(b) -
2^0.5 * qnorm(a)
)
) /
(
(dnorm(
2^0.5 * qnorm(a)
) *
dnorm(
qnorm(b) -
2^0.5 * qnorm(a)
)
) +
(dnorm(
2^0.5 * qnorm(b)
) *
dnorm(
qnorm(a) -
2^0.5 * qnorm(b)
)
h
}
headsplot <- function(x){heads(0.75,x)}
# a <- 0.07
# b <- 0.75
#
# # Assume H
# xh <- 2^0.5 * qnorm(a)
# yh <- qnorm(b) - 2^0.5 * qnorm(a)
# hp <- dnorm(xh) * dnorm(yh)
#
# # Assume not H
# xnh <- 2^0.5 * qnorm(b)
# ynh <- qnorm(a) - 2^0.5 * qnorm(b)
# nhp <- dnorm(xnh) * dnorm(ynh)
#
# h <- hp / (hp + nhp)
# p <- (1-h)*a + h*b
ggplot() +
theme_minimal() +
xlim(0.001,0.999) +
geom_function(fun = headsplot) +
#  geom_function(fun = identity, color = "grey80") +
labs(
x = "B(*p*)",
y = "Posterior probability of Heads"
) +
theme(axis.title.y = ggtext::element_markdown(),
axis.title.x = ggtext::element_markdown())
require(tidyverse)
heads <- function(a, b){
h = (dnorm(
2^0.5 * qnorm(a)
) *
dnorm(
qnorm(b) -
2^0.5 * qnorm(a)
)
) /
(
(dnorm(
2^0.5 * qnorm(a)
) *
dnorm(
qnorm(b) -
2^0.5 * qnorm(a)
)
) +
(dnorm(
2^0.5 * qnorm(b)
) *
dnorm(
qnorm(a) -
2^0.5 * qnorm(b)
)
h
}
headsplot <- function(x){heads(0.25,x)}
# a <- 0.07
# b <- 0.75
#
# # Assume H
# xh <- 2^0.5 * qnorm(a)
# yh <- qnorm(b) - 2^0.5 * qnorm(a)
# hp <- dnorm(xh) * dnorm(yh)
#
# # Assume not H
# xnh <- 2^0.5 * qnorm(b)
# ynh <- qnorm(a) - 2^0.5 * qnorm(b)
# nhp <- dnorm(xnh) * dnorm(ynh)
#
# h <- hp / (hp + nhp)
# p <- (1-h)*a + h*b
ggplot() +
theme_minimal() +
xlim(0.001,0.999) +
geom_function(fun = headsplot) +
#  geom_function(fun = identity, color = "grey80") +
labs(
x = "B(*p*)",
y = "Posterior probability of Heads"
) +
theme(axis.title.y = ggtext::element_markdown(),
axis.title.x = ggtext::element_markdown())
require(tidyverse)
heads <- function(a, b){
h = (dnorm(
2^0.5 * qnorm(a)
) *
dnorm(
qnorm(b) -
2^0.5 * qnorm(a)
)
) /
(
(dnorm(
2^0.5 * qnorm(a)
) *
dnorm(
qnorm(b) -
2^0.5 * qnorm(a)
)
) +
(dnorm(
2^0.5 * qnorm(b)
) *
dnorm(
qnorm(a) -
2^0.5 * qnorm(b)
)
h
}
headsplot <- function(x){heads(0.75,x)}
# a <- 0.07
# b <- 0.75
#
# # Assume H
# xh <- 2^0.5 * qnorm(a)
# yh <- qnorm(b) - 2^0.5 * qnorm(a)
# hp <- dnorm(xh) * dnorm(yh)
#
# # Assume not H
# xnh <- 2^0.5 * qnorm(b)
# ynh <- qnorm(a) - 2^0.5 * qnorm(b)
# nhp <- dnorm(xnh) * dnorm(ynh)
#
# h <- hp / (hp + nhp)
# p <- (1-h)*a + h*b
ggplot() +
theme_minimal() +
xlim(0.001,0.999) +
geom_function(fun = headsplot) +
#  geom_function(fun = identity, color = "grey80") +
labs(
x = "B(*p*)",
y = "Posterior probability of Heads"
) +
theme(axis.title.y = ggtext::element_markdown(),
axis.title.x = ggtext::element_markdown())
install.packages("pdftools")
require(tidyverse)
# Letting new_a <- 0 and finding limit value of c
require(tidyverse)
# Initial probability weights
a_weight <- 1
b_weight <- 1
c_weight <- 4
t_weight <- a_weight + b_weight + c_weight
# Turn them into probabilities
a_prob <- a_weight / t_weight
b_prob <- b_weight / t_weight
c_prob <- c_weight / t_weight
limit_tib <- tribble(
~a, ~best_brier, ~best_log)
find_brier <- function(c_posterior){
a_posterior <- new_a
b_posterior <- 1 - new_a - c_posterior
# Calculate Brier inaccuracy
# First Brier if each is true
brier_a <- (1 - a_posterior)^2 + b_posterior^2 + c_posterior^2
brier_b <- (1 - b_posterior)^2 + c_posterior^2 + a_posterior^2
brier_c <- (1 - c_posterior)^2 + a_posterior^2 + b_posterior^2
# Then overall Brier
brier_t <- a_prob * brier_a + b_prob * brier_b + c_prob * brier_c
brier_t / 3
}
find_logacc <- function(c_posterior){
# calculate a and b
a_posterior <- new_a
b_posterior <- 1 - new_a - c_posterior
# Calculate Log inaccuracy
logacc_a <- -log(a_posterior) - log(1 - b_posterior) - log(1 - c_posterior)
logacc_b <- -log(b_posterior) - log(1 - c_posterior) - log(1 - a_posterior)
logacc_c <- -log(c_posterior) - log(1 - a_posterior) - log(1 - b_posterior)
# Then overall log
logacc_t <- a_prob * logacc_a + b_prob * logacc_b + c_prob * logacc_c
logacc_t / 3
}
# Find new ratio of a to a+b
for (new_a in (1:30)/100){
acc_tibb <- tibble(c = 5:((1-new_a)*1000-5) * 0.001) |>
mutate(brier = find_brier(c), logacc = find_logacc(c))
brier_min <- acc_tibb  |> slice_min(order_by = brier, n = 1)
logacc_min <- acc_tibb  |> slice_min(order_by = logacc, n = 1)
limit_tib <- limit_tib |>
add_row(a = new_a, best_brier = brier_min$c[1], best_log = logacc_min$c[1])
}
View(limit_tib)
# Letting new_a <- 0 and finding limit value of c
require(tidyverse)
# Initial probability weights
a_weight <- 1
b_weight <- 1
c_weight <- 4
t_weight <- a_weight + b_weight + c_weight
# Turn them into probabilities
a_prob <- a_weight / t_weight
b_prob <- b_weight / t_weight
c_prob <- c_weight / t_weight
limit_tib <- tribble(
~a, ~best_brier, ~best_log)
find_brier <- function(c_posterior){
a_posterior <- new_a
b_posterior <- 1 - new_a - c_posterior
# Calculate Brier inaccuracy
# First Brier if each is true
brier_a <- (1 - a_posterior)^2 + b_posterior^2 + c_posterior^2
brier_b <- (1 - b_posterior)^2 + c_posterior^2 + a_posterior^2
brier_c <- (1 - c_posterior)^2 + a_posterior^2 + b_posterior^2
# Then overall Brier
brier_t <- a_prob * brier_a + b_prob * brier_b + c_prob * brier_c
brier_t / 3
}
find_logacc <- function(c_posterior){
# calculate a and b
a_posterior <- new_a
b_posterior <- 1 - new_a - c_posterior
# Calculate Log inaccuracy
logacc_a <- -log(a_posterior) - log(1 - b_posterior) - log(1 - c_posterior)
logacc_b <- -log(b_posterior) - log(1 - c_posterior) - log(1 - a_posterior)
logacc_c <- -log(c_posterior) - log(1 - a_posterior) - log(1 - b_posterior)
# Then overall log
logacc_t <- a_prob * logacc_a + b_prob * logacc_b + c_prob * logacc_c
logacc_t / 3
}
# Find new ratio of a to a+b
for (new_a in (0:00)/100){
acc_tibb <- tibble(c = 5:((1-new_a)*1000-5) * 0.001) |>
mutate(brier = find_brier(c))
#, logacc = find_logacc(c))
brier_min <- acc_tibb  |> slice_min(order_by = brier, n = 1)
#logacc_min <- acc_tibb  |> slice_min(order_by = logacc, n = 1)
limit_tib <- limit_tib |>
add_row(a = new_a, best_brier = brier_min$c[1], best_log = 0)#logacc_min$c[1])
}
View(acc_tibb)
# Letting new_a <- 0 and finding limit value of c
require(tidyverse)
# Initial probability weights
a_weight <- 1
b_weight <- 1
c_weight <- 4
t_weight <- a_weight + b_weight + c_weight
# Turn them into probabilities
a_prob <- a_weight / t_weight
b_prob <- b_weight / t_weight
c_prob <- c_weight / t_weight
limit_tib <- tribble(
~a, ~best_brier, ~best_log)
find_brier <- function(c_posterior){
a_posterior <- new_a
b_posterior <- 1 - new_a - c_posterior
# Calculate Brier inaccuracy
# First Brier if each is true
brier_a <- (1 - a_posterior)^2 + b_posterior^2 + c_posterior^2
brier_b <- (1 - b_posterior)^2 + c_posterior^2 + a_posterior^2
brier_c <- (1 - c_posterior)^2 + a_posterior^2 + b_posterior^2
# Then overall Brier
brier_t <- a_prob * brier_a + b_prob * brier_b + c_prob * brier_c
brier_t / 3
}
find_logacc <- function(c_posterior){
# calculate a and b
a_posterior <- new_a
b_posterior <- 1 - new_a - c_posterior
# Calculate Log inaccuracy
logacc_a <- -log(a_posterior) - log(1 - b_posterior) - log(1 - c_posterior)
logacc_b <- -log(b_posterior) - log(1 - c_posterior) - log(1 - a_posterior)
logacc_c <- -log(c_posterior) - log(1 - a_posterior) - log(1 - b_posterior)
# Then overall log
logacc_t <- a_prob * logacc_a + b_prob * logacc_b + c_prob * logacc_c
logacc_t / 3
}
# Find new ratio of a to a+b
for (new_a in (0:00)/100){
acc_tibb <- tibble(c = 0:((1-new_a)*1000-0) * 0.001) |>
mutate(brier = find_brier(c))
#, logacc = find_logacc(c))
brier_min <- acc_tibb  |> slice_min(order_by = brier, n = 1)
#logacc_min <- acc_tibb  |> slice_min(order_by = logacc, n = 1)
limit_tib <- limit_tib |>
add_row(a = new_a, best_brier = brier_min$c[1], best_log = 0)#logacc_min$c[1])
}
c_posterior <- 1
a_posterior <- new_a
b_posterior <- 1 - new_a - c_posterior
# Calculate Brier inaccuracy
# First Brier if each is true
brier_a <- (1 - a_posterior)^2 + b_posterior^2 + c_posterior^2
brier_b <- (1 - b_posterior)^2 + c_posterior^2 + a_posterior^2
brier_c <- (1 - c_posterior)^2 + a_posterior^2 + b_posterior^2
# Then overall Brier
brier_t <- a_prob * brier_a + b_prob * brier_b + c_prob * brier_c
brier_t / 3
1.68+1.28+0.08*4
3.28/18
x <- 0.8
a <- 1/6
b <- 1/6
c <- 2/3
take_1 <- a * (1 + (1-x)^2 + x^2) + b * (x^2 + x^2) + c * ((1-x)^2 + (1-x)^2)
x <- 0.8
a <- 1/6
b <- 1/6
c <- 2/3
take_1 <- [a * (1 + (1-x)^2 + x^2) + b * (x^2 + x^2) + c * ((1-x)^2 + (1-x)^2)]/3
x <- 0.8
a <- 1/6
b <- 1/6
c <- 2/3
take_1 <- (a * (1 + (1-x)^2 + x^2) + b * (x^2 + x^2) + c * ((1-x)^2 + (1-x)^2))/3
x <- 0.8
a <- 1/6
b <- 1/6
c <- 2/3
take_1 <- (a * (1 + (1-x)^2 + x^2) + b * (x^2 + x^2) + c * ((1-x)^2 + (1-x)^2))/3
take_2 <- (a * (1 + 2*x^2 -2*x + 1) + 2 * b * x^2 + 2 * c * (x^2 - 2*x + 1))/3
x <- 0.8
a <- 1/6
b <- 1/6
c <- 2/3
take_1 <- (a * (1 + (1-x)^2 + x^2) + b * (x^2 + x^2) + c * ((1-x)^2 + (1-x)^2))/3
take_2 <- (a * (1 + 2*x^2 -2*x + 1) + 2 * b * x^2 + 2 * c * (x^2 - 2*x + 1))/3
take_3 <- (2*a*(x^2 + x + 1) + 2*b*x^2 + 2*c*(2^x - 2*x + 1))/3
x <- 0.8
a <- 1/6
b <- 1/6
c <- 2/3
take_1 <- (a * (1 + (1-x)^2 + x^2) + b * (x^2 + x^2) + c * ((1-x)^2 + (1-x)^2))/3
take_2 <- (a * (1 + 2*x^2 -2*x + 1) + 2 * b * x^2 + 2 * c * (x^2 - 2*x + 1))/3
take_3 <- (2*a*(x^2 + x + 1) + 2*b*x^2 + 2*c*(x^2 - 2*x + 1))/3
x <- 0.8
a <- 1/6
b <- 1/6
c <- 2/3
take_1 <- (a * (1 + (1-x)^2 + x^2) + b * (x^2 + x^2) + c * ((1-x)^2 + (1-x)^2))/3
take_2 <- (a * (1 + 2*x^2 -2*x + 1) + 2 * b * x^2 + 2 * c * (x^2 - 2*x + 1))/3
take_3 <- (2*a*(x^2 - x + 1) + 2*b*x^2 + 2*c*(x^2 - 2*x + 1))/3
x <- 0.8
a <- 1/6
b <- 1/6
c <- 2/3
take_1 <- (a * (1 + (1-x)^2 + x^2) + b * (x^2 + x^2) + c * ((1-x)^2 + (1-x)^2))/3
take_2 <- (a * (1 + 2*x^2 -2*x + 1) + 2 * b * x^2 + 2 * c * (x^2 - 2*x + 1))/3
take_3 <- (2*a*(x^2 - x + 1) + 2*b*x^2 + 2*c*(x^2 - 2*x + 1))/3
take_4 <- (2*x^2*(a + b + c) - 2*x * (a + 2c) - 2(a + c))/3
x <- 0.8
a <- 1/6
b <- 1/6
c <- 2/3
take_1 <- (a * (1 + (1-x)^2 + x^2) + b * (x^2 + x^2) + c * ((1-x)^2 + (1-x)^2))/3
take_2 <- (a * (1 + 2*x^2 -2*x + 1) + 2 * b * x^2 + 2 * c * (x^2 - 2*x + 1))/3
take_3 <- (2*a*(x^2 - x + 1) + 2*b*x^2 + 2*c*(x^2 - 2*x + 1))/3
take_4 <- (2*x^2*(a + b + c) - 2*x * (a + 2*c) - 2(a + c))/3
x <- 0.8
a <- 1/6
b <- 1/6
c <- 2/3
take_1 <- (a * (1 + (1-x)^2 + x^2) + b * (x^2 + x^2) + c * ((1-x)^2 + (1-x)^2))/3
take_2 <- (a * (1 + 2*x^2 -2*x + 1) + 2 * b * x^2 + 2 * c * (x^2 - 2*x + 1))/3
take_3 <- (2*a*(x^2 - x + 1) + 2*b*x^2 + 2*c*(x^2 - 2*x + 1))/3
take_4 <- (2 *x^2 * (a + b + c) - 2 * x * (a + 2*c) - 2* (a + c))/3
x <- 0.8
a <- 1/6
b <- 1/6
c <- 2/3
take_1 <- (a * (1 + (1-x)^2 + x^2) + b * (x^2 + x^2) + c * ((1-x)^2 + (1-x)^2))/3
take_2 <- (a * (1 + 2*x^2 -2*x + 1) + 2 * b * x^2 + 2 * c * (x^2 - 2*x + 1))/3
take_3 <- (2*a*(x^2 - x + 1) + 2*b*x^2 + 2*c*(x^2 - 2*x + 1))/3
take_4 <- (2 *x^2 * (a + b + c) - 2 * x * (a + 2*c) + 2* (a + c))/3
x <- 0.8
a <- 1/6
b <- 1/6
c <- 2/3
take_1 <- (a * (1 + (1-x)^2 + x^2) + b * (x^2 + x^2) + c * ((1-x)^2 + (1-x)^2))/3
take_2 <- (a * (1 + 2*x^2 -2*x + 1) + 2 * b * x^2 + 2 * c * (x^2 - 2*x + 1))/3
take_3 <- (2*a*(x^2 - x + 1) + 2*b*x^2 + 2*c*(x^2 - 2*x + 1))/3
take_4 <- (2 *x^2 * (a + b + c) - 2 * x * (a + 2*c) + 2* (a + c))/3
take_5 <- (2 *x^2 - 2 * x * (a + 2*c) + 2* (a + c))/3
install.packages("magick")
install.packages("pdftools")
capabilities('cairo')
capabilities()
x11()
capabilities()
install.packages("slider")
install.packages("lsa")
require(tidyverse)
